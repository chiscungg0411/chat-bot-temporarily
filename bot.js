require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const express = require("express");
const puppeteer = require("puppeteer-core");
const StealthPlugin = require("puppeteer-extra-plugin-stealth");
const puppeteerExtra = require("puppeteer-extra");

puppeteerExtra.use(StealthPlugin());

const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const bot = new TelegramBot(TOKEN, { polling: true });
const app = express();
app.use(express.json());
const PORT = process.env.PORT || 10000;

const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

async function launchBrowser() {
  try {
    const browser = await puppeteerExtra.launch({
      executablePath: process.env.CHROME_PATH || "/usr/bin/google-chrome-stable",
      headless: "new",
      args: [
        "--no-sandbox",
        "--disable-setuid-sandbox",
        "--disable-dev-shm-usage",
        "--disable-gpu",
        "--disable-extensions",
        "--disable-background-networking",
        "--single-process",
        "--no-zygote",
      ],
      defaultViewport: { width: 1280, height: 720 },
      timeout: 120000,
    });
    console.log("‚úÖ Tr√¨nh duy·ªát Puppeteer ƒë√£ kh·ªüi ƒë·ªông.");
    return browser;
  } catch (error) {
    console.error("‚ùå L·ªói kh·ªüi ƒë·ªông tr√¨nh duy·ªát:", error.message);
    throw new Error("Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông tr√¨nh duy·ªát.");
  }
}

async function login(page, username, password, retries = 5) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      console.log(`üîë Th·ª≠ ƒëƒÉng nh·∫≠p l·∫ßn ${attempt}...`);
      await page.goto("https://portal.vhu.edu.vn/login", {
        waitUntil: "networkidle0",
        timeout: 120000,
      });
      console.log("‚úÖ Trang ƒëƒÉng nh·∫≠p ƒë√£ t·∫£i.");

      const hasCaptcha = await page.evaluate(() => !!document.querySelector("iframe[src*='captcha']"));
      if (hasCaptcha) {
        throw new Error("Trang y√™u c·∫ßu CAPTCHA, kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p t·ª± ƒë·ªông.");
      }

      await page.waitForSelector("input[name='email']", { timeout: 120000 });
      await page.type("input[name='email']", username, { delay: 100 });
      await page.waitForSelector("input[name='password']", { timeout: 120000 });
      await page.type("input[name='password']", password, { delay: 100 });
      console.log("‚úçÔ∏è ƒê√£ nh·∫≠p th√¥ng tin ƒëƒÉng nh·∫≠p.");

      await page.setUserAgent(
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
      );

      await page.waitForSelector("button[type='submit']", { timeout: 120000 });
      await page.click("button[type='submit']");
      console.log("‚è≥ ƒêang ch·ªù ph·∫£n h·ªìi sau ƒëƒÉng nh·∫≠p...");

      await page.waitForNavigation({ waitUntil: "networkidle0", timeout: 120000 });
      const finalUrl = page.url();
      console.log(`üåê URL sau ƒëƒÉng nh·∫≠p: ${finalUrl}`);

      if (finalUrl.includes("/login")) {
        const errorMessage = await page.evaluate(() => {
          if (document.body.innerText.includes("Username or password is incorrect")) return "Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u.";
          return "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i (l·ªói kh√¥ng x√°c ƒë·ªãnh).";
        });
        throw new Error(`ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: ${errorMessage}`);
      }

      console.log("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng:", finalUrl);
      return true;
    } catch (error) {
      console.error(`‚ùå L·ªói ƒëƒÉng nh·∫≠p l·∫ßn ${attempt}:`, error.message);
      if (attempt === retries) throw new Error(`ƒêƒÉng nh·∫≠p th·∫•t b·∫°i sau ${retries} l·∫ßn: ${error.message}`);
      console.log("‚è≥ Th·ª≠ l·∫°i sau 5 gi√¢y...");
      await page.close();
      await delay(5000);
      page = await (await launchBrowser()).newPage();
    }
  }
}

async function getSchedule(chatId) {
  const browser = await launchBrowser();
  const page = await browser.newPage();
  try {
    await login(page, process.env.VHU_EMAIL, process.env.VHU_PASSWORD);
    console.log("üè† ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang ch·ªß sinh vi√™n...");
    await page.goto("https://portal.vhu.edu.vn/student", {
      waitUntil: "networkidle0",
      timeout: 120000,
    });
    console.log(`üåê URL sau khi v√†o trang ch·ªß: ${page.url()}`);

    console.log("üìÖ ƒêi·ªÅu h∆∞·ªõng tr·ª±c ti·∫øp ƒë·∫øn l·ªãch h·ªçc...");
    await page.goto("https://portal.vhu.edu.vn/student/schedules", {
      waitUntil: "networkidle0",
      timeout: 120000,
    });
    console.log(`üåê URL sau khi truy c·∫≠p l·ªãch h·ªçc: ${page.url()}`);

    console.log("‚è≥ ƒêang ch·ªù b·∫£ng l·ªãch h·ªçc t·∫£i...");
    await page.waitForSelector("#psc-table-head", { timeout: 120000 }).catch(async () => {
      const content = await page.content();
      throw new Error(`Kh√¥ng t√¨m th·∫•y #psc-table-head. N·ªôi dung trang: ${content.slice(0, 500)}...`);
    });

    const scheduleData = await page.evaluate(() => {
      const table = document.querySelector("#psc-table-head");
      if (!table) throw new Error("Kh√¥ng t√¨m th·∫•y b·∫£ng l·ªãch h·ªçc!");

      const headers = Array.from(table.querySelectorAll("thead th")).map((th) => th.textContent.trim());
      const days = headers.slice(1);
      const schedule = {};
      days.forEach((day, dayIndex) => {
        schedule[day] = [];
        const cells = table.querySelectorAll(`tbody td:nth-child(${dayIndex + 2})`);
        cells.forEach((cell) => {
          const detail = cell.querySelector(".DetailSchedule");
          if (detail) {
            const spans = detail.querySelectorAll("span");
            const subjectFull = spans[1]?.textContent.trim() || "Kh√¥ng r√µ";
            const subjectMatch = subjectFull.match(/(.*) \((.*)\)/);
            schedule[day].push({
              room: spans[0]?.textContent.trim() || "Kh√¥ng r√µ",
              subject: subjectMatch ? subjectMatch[1] : subjectFull,
              classCode: subjectMatch ? subjectMatch[2] : "Kh√¥ng r√µ",
              periods: spans[4]?.textContent.replace("Ti·∫øt: ", "").trim() || "Kh√¥ng r√µ",
              startTime: spans[5]?.textContent.replace("Gi·ªù b·∫Øt ƒë·∫ßu: ", "").trim() || "Kh√¥ng r√µ",
              professor: spans[6]?.textContent.replace("GV: ", "").trim() || "",
              email: spans[7]?.textContent.replace("Email: ", "").trim() || "",
            });
          }
        });
      });
      return { schedule, week: "n√†y c·ªßa b·∫°n" };
    });

    console.log("‚úÖ ƒê√£ l·∫•y l·ªãch h·ªçc.");
    let message = `üìÖ **L·ªãch h·ªçc tu·∫ßn ${scheduleData.week}**\n------------------------------------\n`;
    let hasSchedule = false;

    for (const [ngay, monHocs] of Object.entries(scheduleData.schedule)) {
      message += `üìå **${ngay}:**\n`;
      if (monHocs.length) {
        hasSchedule = true;
        monHocs.forEach((m) => {
          message += `üìñ **${m.subject} ‚Äì ${m.classCode}**\n` +
                     `     (Ti·∫øt ${m.periods}, Gi·ªù b·∫Øt ƒë·∫ßu: ${m.startTime} ‚Äì Ph√≤ng h·ªçc: ${m.room}, GV: ${m.professor}, Email: ${m.email})\n`;
        });
      } else {
        message += "‚ùå Kh√¥ng c√≥ l·ªãch\n";
      }
      message += "\n";
    }

    if (!hasSchedule) {
      message = `üìÖ **L·ªãch h·ªçc tu·∫ßn ${scheduleData.week}**\n------------------------------------\n‚ùå Kh√¥ng c√≥ l·ªãch h·ªçc trong tu·∫ßn n√†y.`;
    }

    await bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
  } catch (error) {
    console.error("‚ùå L·ªói trong getSchedule:", error.message);
    await bot.sendMessage(chatId, `‚ùå L·ªói l·∫•y l·ªãch h·ªçc: ${error.message}`);
  } finally {
    await browser.close();
  }
}

async function getNotifications(chatId) {
  const browser = await launchBrowser();
  const page = await browser.newPage();
  try {
    await login(page, process.env.VHU_EMAIL, process.env.VHU_PASSWORD);
    await page.goto("https://portal.vhu.edu.vn/student/index", { waitUntil: "networkidle0", timeout: 120000 });
    await page.waitForSelector(".MuiTableBody-root", { timeout: 120000 });
    const notifications = await page.evaluate(() => {
      const rows = document.querySelectorAll(".MuiTableBody-root tr");
      return Array.from(rows).map((row) => {
        const cols = row.querySelectorAll("td");
        return {
          MessageSubject: cols[0]?.querySelector("a")?.textContent.trim() || "Kh√¥ng r√µ",
          SenderName: cols[1]?.textContent.trim() || "Kh√¥ng r√µ",
          CreationDate: cols[2]?.textContent.trim() || "Kh√¥ng r√µ",
        };
      });
    });

    let message = "üì¢ **Th√¥ng b√°o m·ªõi nh·∫•t**\n------------------------------------\n";
    if (notifications.length) {
      notifications.forEach((n) => {
        message += `üìå **${n.MessageSubject}**\n` +
                   `     (Ng∆∞·ªùi g·ª≠i: ${n.SenderName}, Ng√†y: ${n.CreationDate})\n\n`;
      });
    } else {
      message += "‚ùå Kh√¥ng c√≥ th√¥ng b√°o n√†o.\n";
    }
    await bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
  } catch (error) {
    console.error("‚ùå L·ªói trong getNotifications:", error.message);
    await bot.sendMessage(chatId, `‚ùå L·ªói l·∫•y th√¥ng b√°o: ${error.message}`);
  } finally {
    await browser.close();
  }
}

async function getSocialWork(chatId) {
  const browser = await launchBrowser();
  const page = await browser.newPage();
  try {
    await login(page, process.env.VHU_EMAIL, process.env.VHU_PASSWORD);
    await page.goto("https://portal.vhu.edu.vn/student/congtacxahoi", { waitUntil: "networkidle0", timeout: 120000 });
    await page.waitForSelector(".MuiTableBody-root", { timeout: 120000 });
    const socialWork = await page.evaluate(() => {
      const rows = document.querySelectorAll(".MuiTableBody-root tr");
      return Array.from(rows).map((row) => {
        const cols = row.querySelectorAll("td");
        return {
          Index: cols[0]?.textContent.trim() || "Kh√¥ng r√µ",
          Event: cols[1]?.textContent.trim() || "Kh√¥ng r√µ",
          Location: cols[2]?.textContent.trim() || "Kh√¥ng r√µ",
          NumRegistered: cols[3]?.textContent.trim() || "Kh√¥ng r√µ",
          Points: cols[4]?.textContent.trim() || "0",
          StartTime: cols[5]?.textContent.trim() || "Kh√¥ng r√µ",
          EndTime: cols[6]?.textContent.trim() || "Kh√¥ng r√µ",
        };
      });
    });

    let message = "ü§ù **C√¥ng t√°c x√£ h·ªôi**\n------------------------------------\n";
    if (socialWork.length) {
      socialWork.forEach((s) => {
        message += `üìå **${s.Event}**\n` +
                   `     (ƒê·ªãa ƒëi·ªÉm: ${s.Location}, ƒê√£ ƒëƒÉng k√Ω: ${s.NumRegistered}, ƒêi·ªÉm: ${s.Points})\n` +
                   `     (B·∫Øt ƒë·∫ßu: ${s.StartTime}, K·∫øt th√∫c: ${s.EndTime})\n\n`;
      });
    } else {
      message += "‚ùå Kh√¥ng c√≥ c√¥ng t√°c x√£ h·ªôi n√†o.\n";
    }
    await bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
  } catch (error) {
    console.error("‚ùå L·ªói trong getSocialWork:", error.message);
    await bot.sendMessage(chatId, `‚ùå L·ªói l·∫•y c√¥ng t√°c x√£ h·ªôi: ${error.message}`);
  } finally {
    await browser.close();
  }
}

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(
    chatId,
    "üëã Xin ch√†o! M√¨nh l√† Bot h·ªó tr·ª£ sinh vi√™n VHU.\n" +
      "üìÖ /tuannay - L·ªãch h·ªçc tu·∫ßn n√†y.\n" +
      "üì¢ /thongbao - Th√¥ng b√°o m·ªõi nh·∫•t.\n" +
      "ü§ù /congtac - C√¥ng t√°c x√£ h·ªôi."
  );
});

bot.onText(/\/tuannay/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "‚è≥ ƒêang l·∫•y l·ªãch h·ªçc tu·∫ßn n√†y...");
  getSchedule(chatId);
});

bot.onText(/\/thongbao/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "‚è≥ ƒêang l·∫•y th√¥ng b√°o...");
  getNotifications(chatId);
});

bot.onText(/\/congtac/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "‚è≥ ƒêang l·∫•y danh s√°ch c√¥ng t√°c x√£ h·ªôi...");
  getSocialWork(chatId);
});

bot.on("polling_error", (error) => {
  console.error("‚ùå Polling error:", error.message);
});

app.get("/", (req, res) => res.send("Bot is running"));

app.listen(PORT, () => {
  console.log(`Server ch·∫°y tr√™n port ${PORT}`);
});

console.log("ü§ñ Bot Telegram ƒëang kh·ªüi ƒë·ªông...");
console.log("‚úÖ Bot ƒëang ch·∫°y ·ªü ch·∫ø ƒë·ªô polling...");