const puppeteer = require("puppeteer-core");
const StealthPlugin = require("puppeteer-extra-plugin-stealth");
const puppeteerExtra = require("puppeteer-extra");

puppeteerExtra.use(StealthPlugin());

async function launchBrowser() {
  try {
    const browser = await puppeteerExtra.launch({
      executablePath: process.env.CHROME_PATH || "/usr/bin/google-chrome-stable",
      headless: "new",
      args: [
        "--no-sandbox",
        "--disable-setuid-sandbox",
        "--disable-dev-shm-usage",
        "--disable-gpu",
        "--disable-extensions",
        "--disable-background-networking",
        "--no-zygote",
        "--single-process",
        "--disable-accelerated-2d-canvas",
        "--disable-features=site-per-process",
      ],
      defaultViewport: { width: 1280, height: 720 },
      timeout: 60000,
    });
    console.log("‚úÖ Tr√¨nh duy·ªát Puppeteer ƒë√£ kh·ªüi ƒë·ªông.");
    return browser;
  } catch (error) {
    console.error("‚ùå L·ªói kh·ªüi ƒë·ªông tr√¨nh duy·ªát:", error.message);
    throw new Error("Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông tr√¨nh duy·ªát.");
  }
}

async function login(page, username, password, retries = 5) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      console.log(`üîë Th·ª≠ ƒëƒÉng nh·∫≠p l·∫ßn ${attempt}...`);
      await page.goto("https://portal.vhu.edu.vn/login", {
        waitUntil: "networkidle2",
        timeout: 120000, // TƒÉng timeout l√™n 120 gi√¢y
      });
      console.log("‚úÖ Trang ƒëƒÉng nh·∫≠p ƒë√£ t·∫£i.");

      await page.waitForSelector("input[name='email']", { timeout: 60000 });
      await page.type("input[name='email']", username, { delay: 50 });
      await page.waitForSelector("input[name='password']", { timeout: 60000 });
      await page.type("input[name='password']", password, { delay: 50 });
      console.log("‚úçÔ∏è ƒê√£ nh·∫≠p th√¥ng tin ƒëƒÉng nh·∫≠p.");

      await page.setUserAgent(
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
      );

      await page.waitForSelector("button[type='submit']", { timeout: 60000 });
      await page.click("button[type='submit']");
      console.log("‚è≥ ƒêang ch·ªù ph·∫£n h·ªìi sau ƒëƒÉng nh·∫≠p...");

      await page.waitForNavigation({ waitUntil: "networkidle2", timeout: 120000 });
      const finalUrl = page.url();
      console.log(`üåê URL sau ƒëƒÉng nh·∫≠p: ${finalUrl}`);

      // Ki·ªÉm tra CAPTCHA ho·∫∑c l·ªói ƒëƒÉng nh·∫≠p
      const content = await page.content();
      if (finalUrl.includes("/login")) {
        console.log(`üìÑ N·ªôi dung trang sau ƒëƒÉng nh·∫≠p th·∫•t b·∫°i: ${content.slice(0, 500)}...`);
        const errorMessage = await page.evaluate(() => {
          if (document.body.innerText.includes("Username or password is incorrect")) {
            return "Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u.";
          } else if (document.querySelector("iframe[src*='captcha']")) {
            return "Y√™u c·∫ßu CAPTCHA, kh√¥ng th·ªÉ x·ª≠ l√Ω t·ª± ƒë·ªông.";
          }
          return "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i (l·ªói kh√¥ng x√°c ƒë·ªãnh).";
        });
        throw new Error(`ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: ${errorMessage}`);
      }

      console.log("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng:", finalUrl);
      return true;
    } catch (error) {
      console.error(`‚ùå L·ªói ƒëƒÉng nh·∫≠p l·∫ßn ${attempt}:`, error.message);
      console.log(`üåê URL khi l·ªói: ${page.url()}`);
      const pageContent = await page.content();
      console.log(`üìÑ N·ªôi dung trang khi l·ªói: ${pageContent.slice(0, 500)}...`);
      if (attempt === retries) throw new Error(`ƒêƒÉng nh·∫≠p th·∫•t b·∫°i sau ${retries} l·∫ßn: ${error.message}`);
      console.log("‚è≥ Th·ª≠ l·∫°i sau 5 gi√¢y...");
      await page.close();
      await new Promise((resolve) => setTimeout(resolve, 5000));
      page = await (await launchBrowser()).newPage();
    }
  }
}

async function getSchedule(weekOffset = 0) {
  const browser = await launchBrowser();
  const page = await browser.newPage();
  try {
    await page.setRequestInterception(true);
    page.on("request", (req) => {
      if (["image", "stylesheet", "font"].includes(req.resourceType())) req.abort();
      else req.continue();
    });

    await login(page, process.env.VHU_EMAIL, process.env.VHU_PASSWORD);
    console.log("üè† ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang ch·ªß sinh vi√™n...");
    await page.goto("https://portal.vhu.edu.vn/student", {
      waitUntil: "networkidle2",
      timeout: 120000,
    });
    console.log(`üåê URL sau khi v√†o trang ch·ªß: ${page.url()}`);
    const homeContent = await page.content();
    console.log(`üìÑ N·ªôi dung trang ch·ªß: ${homeContent.slice(0, 500)}...`);

    console.log("üìÖ ƒêi·ªÅu h∆∞·ªõng tr·ª±c ti·∫øp ƒë·∫øn l·ªãch h·ªçc...");
    await page.goto("https://portal.vhu.edu.vn/student/schedules", {
      waitUntil: "networkidle2",
      timeout: 120000,
    });
    console.log(`üåê URL sau khi truy c·∫≠p l·ªãch h·ªçc: ${page.url()}`);

    // Ch·ªù b·∫£ng l·ªãch h·ªçc xu·∫•t hi·ªán v·ªõi timeout d√†i h∆°n
    await page.waitForSelector("#psc-table-head", { timeout: 30000 }).catch(async () => {
      const content = await page.content();
      throw new Error(`Kh√¥ng t√¨m th·∫•y #psc-table-head sau 30 gi√¢y. N·ªôi dung trang: ${content.slice(0, 500)}...`);
    });
    const scheduleContent = await page.content();
    console.log(`üìÑ N·ªôi dung trang l·ªãch h·ªçc: ${scheduleContent.slice(0, 500)}...`);

    // Ki·ªÉm tra v√† ch·ªçn tu·∫ßn
    const weekButtons = await page.$$(".MuiButton-containedPrimary");
    if (weekButtons.length > 0) {
      if (weekOffset === 1 && weekButtons[2]) {
        console.log("üîú Nh·∫•n n√∫t 'SkipNext' ƒë·ªÉ l·∫•y tu·∫ßn sau...");
        await weekButtons[2].click();
        await page.waitForTimeout(5000); // Ch·ªù l√¢u h∆°n sau khi nh·∫•p
      } else if (weekButtons[1]) {
        console.log("‚è≥ Nh·∫•n n√∫t 'Hi·ªán t·∫°i' ƒë·ªÉ l·∫•y tu·∫ßn n√†y...");
        await weekButtons[1].click();
        await page.waitForTimeout(5000);
      }
    } else {
      console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t ch·ªçn tu·∫ßn, d√πng tu·∫ßn m·∫∑c ƒë·ªãnh.");
    }

    const scheduleData = await page.evaluate(() => {
      const table = document.querySelector("#psc-table-head");
      if (!table) throw new Error("Kh√¥ng t√¨m th·∫•y b·∫£ng l·ªãch h·ªçc!");

      const headers = Array.from(table.querySelectorAll("thead th")).map((th) =>
        th.textContent.trim()
      );
      const days = headers.slice(1);
      const schedule = {};

      days.forEach((day, dayIndex) => {
        schedule[day] = [];
        const cells = table.querySelectorAll(`tbody td:nth-child(${dayIndex + 2})`);
        cells.forEach((cell) => {
          const detail = cell.querySelector(".DetailSchedule");
          if (detail) {
            const spans = detail.querySelectorAll("span");
            schedule[day].push({
              room: spans[0]?.textContent.trim() || "Kh√¥ng r√µ",
              subject: spans[1]?.textContent.trim() || "Kh√¥ng r√µ",
              classCode: spans[2]?.textContent.replace("LHP: ", "").trim() || "Kh√¥ng r√µ",
              periods: spans[4]?.textContent.replace("Ti·∫øt: ", "").trim() || "Kh√¥ng r√µ",
              startTime: spans[5]?.textContent.replace("Gi·ªù b·∫Øt ƒë·∫ßu: ", "").trim() || "Kh√¥ng r√µ",
              professor: spans[6]?.textContent.replace("GV: ", "").trim() || "Kh√¥ng r√µ",
            });
          }
        });
      });

      const weekInfo = document.querySelector(".MuiSelect-select")?.textContent.trim() || days[0].split("\n")[1] + " - " + days[days.length - 1].split("\n")[1];
      return { schedule, week: weekInfo };
    });

    console.log("‚úÖ ƒê√£ l·∫•y l·ªãch h·ªçc.");
    await browser.close();
    return scheduleData;
  } catch (error) {
    console.error("‚ùå L·ªói trong getSchedule:", error.message);
    await browser.close();
    throw error;
  }
}

module.exports = { getSchedule };
